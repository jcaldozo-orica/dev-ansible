---

 - name: control node tasks
   hosts: localhost
   gather_facts: no
   tasks:
     - name: gather secrets (linuxSoeUri)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "linuxSoeUri"
       register: kvValue
     - name: declare soe uri cid
       ansible.builtin.set_fact:
         linuxSoeUri: "{{ kvValue }}"

     - name: gather secrets (falcon)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "oricacscid"
       register: kvValue
     - name: declare falcon cid
       ansible.builtin.set_fact:
         oricacscid: "{{ kvValue }}"

     - name: gather secrets (qualysCid)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "qualysCid"
       register: kvValue
     - name: declare qualysCid 
       ansible.builtin.set_fact:
         qualysCid: "{{ kvValue }}"

     - name: gather secrets (qualysActId)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "qualysActId"
       register: kvValue
     - name: declare qualysActId 
       ansible.builtin.set_fact:
         qualysActId: "{{ kvValue }}"

     - name: gather secrets (qualysUri)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "qualysUri"
       register: kvValue
     - name: declare qualysUri 
       ansible.builtin.set_fact:
         qualysUri: "{{ kvValue }}"

     - name: gather secrets (accApiKey)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "accApiKey"
       register: kvValue
     - name: declare accApiKey 
       ansible.builtin.set_fact:
         accApiKey: "{{ kvValue }}"

     - name: gather secrets (accMid)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "accMid"
       register: kvValue
     - name: declare accMid 
       ansible.builtin.set_fact:
         accMid: "{{ kvValue }}"

     - name: gather secrets (illumioAcode)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "illumioAcode"
       register: kvValue
     - name: declare illumioAcode 
       ansible.builtin.set_fact:
         illumioAcode: "{{ kvValue }}"

     - name: gather secrets (joindomain-pw)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "joindomain-pw"
       register: kvValue
     - name: declare joindomainpw 
       ansible.builtin.set_fact:
         joindomainpw: "{{ kvValue }}"

     - name: gather secrets (joindomain-user)
       include_tasks: get_kv_secrets.yml
       vars:
         secretName: "joindomain-user"
       register: kvValue
     - name: declare joindomainuser 
       ansible.builtin.set_fact:
         joindomainuser: "{{ kvValue }}"

 - name: talk to all hosts just so we can learn about them
   hosts: dev
   gather_facts: yes
   vars:
     linuxSoeUri: "{{ hostvars['localhost']['linuxSoeUri'] }}"

   tasks:
     - name: Classify hosts depending on their OS distribution
       group_by:
         key: os_{{ ansible_facts['distribution'] }}
     - name: download azcopy
       become: true
       ansible.builtin.get_url:
         url:  "{{ azcopyUrl }}"
         dest: "/usr/bin/azcopy"
         mode: "0755"
     - name: download soe files via azcopy
       become: true
       ansible.builtin.shell: /usr/bin/azcopy copy --recursive --overwrite false "{{ linuxSoeUri }}" "{{ linuxSoePath }}"

 - hosts: os_Ubuntu
   gather_facts: True
   vars:
     oricacscid: "{{ hostvars['localhost']['oricacscid'] }}"
     qualysCid: "{{ hostvars['localhost']['qualysCid'] }}"
     qualysActId: "{{ hostvars['localhost']['qualysActId'] }}"
     qualysUri: "{{ hostvars['localhost']['qualysUri'] }}"
     accApiKey: "{{ hostvars['localhost']['accApiKey'] }}"
     accMid: "{{ hostvars['localhost']['accMid'] }}"
     illumioAcode: "{{ hostvars['localhost']['illumioAcode'] }}"
     joindomainuser: "{{ hostvars['localhost']['joindomainuser'] }}"
     joindomainpw: "{{ hostvars['localhost']['joindomainpw'] }}"
   tasks:

      - name: Populate service facts
        ansible.builtin.service_facts:
      - name: Gather the package facts
        ansible.builtin.package_facts:
          manager: auto
    #copy zscaler, root ca, sub1 ca, sub2 ca and update CA store
      - name: Copy CA certificates to target hosts
        become: true
        ansible.builtin.copy:
          src:  "{{ linuxSoePath }}/soe/cert/" 
          dest: /usr/local/share/ca-certificates/
          remote_src: yes
      - name: Update CA trust store
        shell: "update-ca-certificates"
        become: true
    #configure ori.orica.net dns suffix
      - name: Install list of packages for dns suffix
        become: true
        ansible.builtin.apt:
          pkg:
          - resolvconf
          state: present
      - name: add ori.orica.net suffix to resolv.conf
        become: true
        ansible.builtin.lineinfile:
          path: /etc/resolvconf/resolv.conf.d/tail
          line:  search ori.orica.net
          create: yes
      - name: update /etc/resolv.conf
        shell: "resolvconf -u"
        become: true

    #install and configure nxlog / point to 10.172.32.101
      - name: Install a list of packages
        become: true
        ansible.builtin.apt:
          pkg:
          - libapr1
          - libdbi1
          state: present
      - name: install nxlog deb package
        become: true
        ansible.builtin.apt: 
          deb: "{{ linuxSoePath }}/soe/linux/deb/nxlog-ce_3.2.2329_ubuntu22_amd64.deb"
      #config goes here

    #install servicenow agent
      - name: install snowagent deb package
        become: true
        ansible.builtin.apt: 
          deb: "{{ linuxSoePath }}/soe/linux/deb/Orica-Linux-snowagent-7.0.0-x64.deb"
      - name: update snow configuration
        shell: "/opt/snow/snowcron -f /opt/snow/snowcron.conf /opt/snow/snowagent"
        become: true

    #install crowdstrike
      - name: install falcon deb package
        become: true
        ansible.builtin.apt: 
          deb: "{{ linuxSoePath }}/soe/linux/deb/falcon-sensor_7.06.0-16108_amd64.deb"
      - name: configure CID
        become: true
        shell: "/opt/CrowdStrike/falconctl -s -f --cid={{ oricacscid }}"
        when: ansible_facts['services']['falcon-sensor.service']['state']| default('not-found') != 'running'
      - name: enable and start falcon-sensor
        become: true
        ansible.builtin.systemd_service:
          state: started
          enabled: true
          name: falcon-sensor
        when: ansible_facts['services']['falcon-sensor.service']['state']| default('not-found') != 'running'
    #install qualys
      - name: install qualys deb package
        become: true
        ansible.builtin.apt: 
          deb: "{{ linuxSoePath }}/soe/linux/deb/QualysCloudAgent.deb"
        when: "'qualys-cloud-agent' not in ansible_facts.packages"
      - name: configure qualys CID
        become: true
        shell: "/usr/local/qualys/cloud-agent/bin/qualys-cloud-agent.sh CustomerId={{ qualysCid }} ActivationId={{ qualysActId }} ServerUri={{ qualysUri }}"
        when: ansible_facts['services']['qualys-cloud-agent.service']['state']| default('not-found')!='running'
      - name: enable and start qualys
        ansible.builtin.systemd_service:
          state: started
          enabled: true
          name: qualys-cloud-agent
        when: ansible_facts['services']['qualys-cloud-agent.service']['state']| default('not-found') != 'running'
    #install servicenow acc
      - name: download acc script
        become: true
        ansible.builtin.get_url:
          url:  "https://orica2.service-now.com/api/sn_agent/agents/install_agent"
          dest: "{{ linuxSoePath }}/install_agent"
          mode: "0755"
      - name: Install a list of packages
        become: true
        ansible.builtin.apt:
          pkg:
          - unzip
          state: present
      - name: Install ServiceNow ACC via shell
        become: true
        shell: "ACC_API_KEY='{{ accApiKey }}' ACC_MID='{{ accMid }}' bash -c '{{ linuxSoePath }}/install_agent'"
        when: ansible_facts['services']['acc.service']['state']| default('not-found') != 'running'
      - name: download 01_servicenow sudoer file
        become: true
        ansible.builtin.get_url:
          url:  "{{ serviceNowSudoerUrl }}"
          dest: "/etc/sudoers.d/01_servicenow"
          mode: "0440"
    #install illumio
      - name: Install Illumio via shell
        become: true
        shell: "rm -fr /opt/illumio_ven_data/tmp && umask 026 && mkdir -p /opt/illumio_ven_data/tmp && curl --tlsv1 'https://scp1.illum.io:443/api/v21/software/ven/image?pair_script=pair.sh&profile_id=1734' -o /opt/illumio_ven_data/tmp/pair.sh && chmod +x /opt/illumio_ven_data/tmp/pair.sh && /opt/illumio_ven_data/tmp/pair.sh --management-server scp1.illum.io:443 --activation-code {{ illumioAcode }}"
        when: "'illumio-ven' not in ansible_facts.packages"
        ignore_errors: True 

        # when: ansible_facts.apt['illumio-ven-*.x86_64'].state != 'running'
      - name: enable and start illumio-ven
        ansible.builtin.systemd_service:
          state: started
          enabled: true
          name: illumio-ven
        when: "'illumio-ven' in ansible_facts.packages and ansible_facts['services']['illumio-ven.service']['state']| default('not-found') != 'running'"
    #configure to allow Icinga
      - name: create systemadmin group
        become: true
        ansible.builtin.group:
          name: systemadmin
          state: present
          gid: 650
      - name: add systemadmin to sudo
        become: true
        ansible.builtin.lineinfile:
          path: /etc/sudoers.d/orica
          line:  '%systemadmin ALL = (ALL) NOPASSWD:ALL'
          create: yes
          validate: /usr/sbin/visudo -cf %s
      - name: create nagios user
        become: true
        ansible.builtin.user:
          name: nagios
          comment: icinga user
          shell: /bin/bash
          uid: 1199
          group: systemadmin
      - name: Set nagios authorized keys taken from url
        become: true
        ansible.posix.authorized_key:
          user: nagios
          state: present
          key: https://raw.githubusercontent.com/jcaldozo-orica/dev-ansible/refs/heads/main/common/nagios.key
      - name: Install a list of packages for Icinga/Nagios
        become: true
        ansible.builtin.apt:
          pkg:
          - monitoring-plugins-standard
          - monitoring-plugins
          - python3-pip
          state: present
      - name: symlink nagios lib
        become: true
        ansible.builtin.file:
          src: /usr/lib/nagios
          dest: /usr/lib64/nagios
          state: link
      - name: Install check_systemd via pip
        ansible.builtin.pip:
          name: check_systemd
          extra_args: --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org 
      - name: download check_mem.pl
        become: true
        ansible.builtin.get_url:
          url:  "https://raw.githubusercontent.com/justintime/nagios-plugins/master/check_mem/check_mem.pl"
          dest: "/usr/lib/nagios/plugins/check_mem.pl"
          mode: "0755"
    #drop banner.txt, configure banner, PermitRootLogin no on /etc/ssh/sshd_config
      - name: Copy banner from soe directory
        become: true
        ansible.builtin.copy:
          src:  "{{ linuxSoePath }}/soe/linux/banner.txt" 
          dest: /etc/ssh/banner.txt
          remote_src: yes
      - name: Configure sshd_config with banner and PermitRootLogin
        become: true
        ansible.builtin.lineinfile:
          path: /etc/ssh/sshd_config
          state: present
          regexp: '^#Banner none'
          line: 'Banner /etc/ssh/banner.txt'
      - name: enable and start sshd
        become: true
        ansible.builtin.systemd_service:
          state: restarted
          name: sshd

    #configure AD login
      - name: Verify join operation
        become: true
        command: realm list
        register: realm_list_output
        ignore_errors: true

      - name: Display command output
        debug:
          var: realm_list_output.stdout
        when: realm_list_output.stdout_lines
      - name: Display failure message
        debug:
          msg: "Failed: Not joined to a domain"
        when: realm_list_output.rc != 0 or not realm_list_output.stdout_lines
      - name: Install a list of packages for SSSD
        become: true
        ansible.builtin.apt:
          pkg:
          - realmd 
          - sssd
          - sssd-tools
          - samba-common
          - krb5-user
          - packagekit
          - samba-common-bin
          - samba-libs
          - adcli
          - libnss-sss
          - libpam-sss 
          state: present
        when: realm_list_output.rc == 0 or realm_list_output.stdout_lines
      - name: execute realm shell
        become: true
        shell: /bin/bash -c "echo {{ joindomainpw }} | realm join --verbose --user={{ joindomainuser }} --computer-ou='OU=Member Servers,DC=ori,DC=orica,DC=net' ori.orica.net"
        register: join_output
        no_log: True
        ignore_errors: yes
        when: realm_list_output.rc == 0 or realm_list_output.stdout_lines
      - name: Display success message
        debug:
          msg: "Join successful!"
        when: join_output.rc == 0

      - name: Display error message
        debug:
          msg: "Join failed or already joined"
        when: join_output.rc != 0
    #configure tmux

    #configure zsh


